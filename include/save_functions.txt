// Save data is stored in tags on the overseas customs houses
// An example save: 603.29_0715954_0715934_0|02_0715600_0900_000|
// Split up: 
//  603.29  -> rep with faction
//  0715954 -> day of save from 1/1/0000
//  0715934 -> last day trade was checked 1/1/0000
//  0       -> day of the month the trade was last checked, 0 if trade wasn't being checked
//  |       -> split between base data and missions
//  02      -> contract type 2
//  0715600 -> contract start date
//  0900    -> contract duration
//  000     -> contract spare data (for sorties, etc)
//  |       -> split between missions
// Saves can have up to five missions with a length of 117

// Sets the game up if no save data could be found
defineFunction(InitializeDefaultData, void)
{
    natoRep = BASE_NATO_REP;
    ussrRep = BASE_USSR_REP;

    if (BASE_DIFFICULTY ? 1)
    {
        REP_TRADE_PER_TON = REP_TRADE_PER_TON * 3;
        REP_TRADE_PER_FAV_TON = REP_TRADE_PER_FAV_TON * 3;
        REP_TRADE_PER_SPECIAL_TON = REP_TRADE_PER_SPECIAL_TON * 3;
        REP_TRADE_DROP_PER_SPECIAL_TON = REP_TRADE_DROP_PER_SPECIAL_TON / 3;
        REP_CENTERING_ABOVE = REP_CENTERING_ABOVE / 3;
        REP_CENTERING_BELOW = REP_CENTERING_BELOW * 3;
    }
    elseif (BASE_DIFFICULTY ? 2)
    {
        REP_TRADE_PER_TON = REP_TRADE_PER_TON * 1.5;
        REP_TRADE_PER_FAV_TON = REP_TRADE_PER_FAV_TON * 1.5;
        REP_TRADE_PER_SPECIAL_TON = REP_TRADE_PER_SPECIAL_TON * 1.5;
        REP_TRADE_DROP_PER_SPECIAL_TON = REP_TRADE_DROP_PER_SPECIAL_TON / 1.5;
        REP_CENTERING_ABOVE = REP_CENTERING_ABOVE / 1.5;
        REP_CENTERING_BELOW = REP_CENTERING_BELOW * 1.5;
    }
    elseif (BASE_DIFFICULTY ? 4)
    {
        REP_TRADE_PER_TON = REP_TRADE_PER_TON / 1.5;
        REP_TRADE_PER_FAV_TON = REP_TRADE_PER_FAV_TON / 1.5;
        REP_TRADE_PER_SPECIAL_TON = REP_TRADE_PER_SPECIAL_TON / 1.5;
        REP_TRADE_DROP_PER_SPECIAL_TON = REP_TRADE_DROP_PER_SPECIAL_TON * 1.5;
        REP_CENTERING_ABOVE = REP_CENTERING_ABOVE * 1.5;
        REP_CENTERING_BELOW = REP_CENTERING_BELOW / 1.5;
    }
    elseif (BASE_DIFFICULTY ? 5)
    {
        REP_TRADE_PER_TON = REP_TRADE_PER_TON / 3;
        REP_TRADE_PER_FAV_TON = REP_TRADE_PER_FAV_TON / 3;
        REP_TRADE_PER_SPECIAL_TON = REP_TRADE_PER_SPECIAL_TON / 3;
        REP_TRADE_DROP_PER_SPECIAL_TON = REP_TRADE_DROP_PER_SPECIAL_TON * 3;
        REP_CENTERING_ABOVE = REP_CENTERING_ABOVE * 3;
        REP_CENTERING_BELOW = REP_CENTERING_BELOW / 3;
    }

    returnVoid();
}

// Caps the float to set decimal places
defineArray(char[16], floatLimitedToDecimalPlaces);
defineArray(char[16], floatToDecimalLimitTemp1);
defineArray(char[16], floatToDecimalLimitTemp2);
defineArray(char[16], floatToDecimalLimitTemp3);
defineVariable(char, floatToDecimalLimitTemp);
defineFunction(LimitDecimalPlaces, void, float:float_to_limit_decimals, int:decimal_count)
{
    strcpy(floatLimitedToDecimalPlaces, "");
    strcpy(floatToDecimalLimitTemp1, "");
    strcpy(floatToDecimalLimitTemp2, "");
    strcpy(floatToDecimalLimitTemp3, "");

    strcpy(floatToDecimalLimitTemp1, float_to_limit_decimals);  // copy float to char[]
    strlen(floatToDecimalLimitTemp1, temp_i4);                  // get length (will include the ".")
    strstr(floatToDecimalLimitTemp1, ".", temp_i5);             // find the "."

    for (j = 0, j < temp_i4, j = j + 1)
    {
        temp_i6 = j - temp_i5;
        floatToDecimalLimitTemp = floatToDecimalLimitTemp1[j];
        if (j < temp_i5)
        {
            // get everything before the decimal
            strcat(floatToDecimalLimitTemp2, floatToDecimalLimitTemp);
        }
        elseif (temp_i6 > 0)
        {
            // get everything after the decimal
            strcat(floatToDecimalLimitTemp3, floatToDecimalLimitTemp);
        }
    }

    if (decimal_count ? 0) {
        strcpy(floatLimitedToDecimalPlaces, floatToDecimalLimitTemp2);
    }
    else()
    {
        strcat(floatToDecimalLimitTemp2, ".");
        temp_i6 = temp_i4 - temp_i5 - 1;

        if (temp_i6 < decimal_count)
        {
            // Add more decimals needed
            for (j = temp_i6, j < decimal_count, j = j + 1)
            {
                strcat(floatToDecimalLimitTemp3, "0");
            }

            strcat(floatToDecimalLimitTemp2, floatToDecimalLimitTemp3);
            strcpy(floatLimitedToDecimalPlaces, floatToDecimalLimitTemp2);;
        }
        else()
        {
            for (j = 0, j < decimal_count, j = j + 1)
            {
                floatToDecimalLimitTemp = floatToDecimalLimitTemp3[j];
                strcat(floatToDecimalLimitTemp2, floatToDecimalLimitTemp);
            }

            strcpy(floatLimitedToDecimalPlaces, floatToDecimalLimitTemp2);
        }
    }

    returnVoid();
}

defineArray(char[16], convertedFloatToCharLength);
defineArray(char[16], convertedFloatToCharLengthTemp1);
defineArray(char[16], convertedFloatToCharLengthTemp2);
defineArray(char[16], convertedFloatToCharLengthTemp3);
defineVariable(char, convertedFloatToCharLengthTemp);
defineFunction(ConvertFloatToCharLength, void, float:float_to_convert_to_length, int:float_max_length)
{
    // convert the float into a specific number of decimals first
    LimitDecimalPlaces(float_to_convert_to_length, 2);
    strcpy(convertedFloatToCharLengthTemp1, floatLimitedToDecimalPlaces);
    strcpy(convertedFloatToCharLength, convertedFloatToCharLengthTemp1);
    
    strlen(convertedFloatToCharLengthTemp1, temp_i4);                            // get length (will include the ".")
    strstr(convertedFloatToCharLengthTemp1, ".", temp_i5);                       // find the "."

    for (j = 0, j < temp_i4, j = j + 1)
    {
        temp_i6 = j - temp_i5;
        convertedFloatToCharLengthTemp = convertedFloatToCharLengthTemp1[j];
        if (j < temp_i5)
        {
            // get everything before the decimal
            strcat(convertedFloatToCharLengthTemp2, convertedFloatToCharLengthTemp);
        }
        elseif (temp_i6 > 0)
        {
            // get everything after the decimal
            strcat(convertedFloatToCharLengthTemp3, convertedFloatToCharLengthTemp);
        }
    }

    if (temp_i4 ? float_max_length)
    {
        returnVoid();
    }
    elseif (temp_i4 < float_max_length)
    {
        strcpy(convertedFloatToCharLength, "");
        temp_i6 = float_max_length - temp_i4;
        for (j = 0, j < temp_i6, j = j + 1)
        {
            strcat(convertedFloatToCharLength, "0");
        }
        strcat(convertedFloatToCharLength, convertedFloatToCharLengthTemp1);
    }
    else()
    {
        strcpy(convertedFloatToCharLength, "");
        for (j = 0, j < float_max_length, j = j + 1)
        {
            convertedFloatToCharLengthTemp = convertedFloatToCharLengthTemp1[j];
            strcat(convertedFloatToCharLength, convertedFloatToCharLengthTemp);
        }
    }

    returnVoid();
}

defineFunction(CreateSaveData, void)
{
    Date_GetCurrentDate_DMY(day, month, year);
    saveDayLong = GetDayLong();

    ConvertFloatToCharLength(natoRep, 6);
    strcat(natoSaveTag, convertedFloatToCharLength);
    strcat(natoSaveTag, "_");
    strcat(natoSaveTag, saveDayLong);

    ConvertFloatToCharLength(ussrRep, 6);
    strcat(ussrSaveTag, convertedFloatToCharLength);
    strcat(ussrSaveTag, "_");
    strcat(ussrSaveTag, saveDayLong);

    // If we're just creating new save data, assume last check was the start of the year
    temp_i4 = year * 365;
    ConvertFloatToCharLength(temp_i4, 6);
    strcat(natoSaveTag, "_");
    strcat(natoSaveTag, convertedFloatToCharLength);
    strcat(ussrSaveTag, "_");
    strcat(ussrSaveTag, convertedFloatToCharLength);
    
    strcat(natoSaveTag, "_0");
    strcat(ussrSaveTag, "_0");

    Building_SetTagChar(natoSaveTag, natoCustom);
    Building_SetTagChar(ussrSaveTag, ussrCustom);

    strcat(temp_c1, saveDayLong);
    strcat(temp_c1, " ");
    strcat(temp_c1, temp_i4);
    strcat(temp_c1, " ");
    strcat(temp_c1, year);
    strcat(temp_c1, NEWLINE);
    strcat(temp_c1, "NATO: ");
    strcat(temp_c1, natoSaveTag);
    strcat(temp_c1, " ");
    strcat(temp_c1, natoCustom);
    strcat(temp_c1, NEWLINE);
    strcat(temp_c1, "USSR: ");
    strcat(temp_c1, ussrSaveTag);
    strcat(temp_c1, " ");
    strcat(temp_c1, ussrCustom);

    Building_GetCharTag(0, temp_c3);
    strcat(temp_c1, NEWLINE);
    strcat(temp_c1, temp_c3);
    Building_GetCharTag(1, temp_c3);
    strcat(temp_c1, NEWLINE);
    strcat(temp_c1, temp_c3);

    //Scenario_WindowWithImageTopLeft("create save data", temp_c1, "", 3);

    returnVoid();
}

defineArray(char[16], processSaveDataTemp1);
defineArray(char[16], processSaveDataTemp2);
defineArray(char[16], processSaveDataTemp3);
defineArray(char[16], processSaveDataTemp4);
defineVariable(char, processSaveDataTemp);
defineFunction(ProcessSaveData, void)
{
    strcpy(processSaveDataTemp1, "");
    strcpy(processSaveDataTemp2, "");

    strcat(temp_c1, "NATO: ");
    strcat(temp_c1, natoSaveTag);
    strcat(temp_c1, NEWLINE);
    strcat(temp_c1, "USSR: ");
    strcat(temp_c1, ussrSaveTag);
    strcat(temp_c1, NEWLINE);

    // Get player rep with factions
    for (i = 0, i < 6, i = i + 1)
    {
        processSaveDataTemp = natoSaveTag[i];
        strcat(processSaveDataTemp1, processSaveDataTemp);
        processSaveDataTemp = ussrSaveTag[i];
        strcat(processSaveDataTemp2, processSaveDataTemp);
    }
    atof(processSaveDataTemp1, natoRep);
    atof(processSaveDataTemp2, ussrRep);

    // Get last save date
    strcpy(processSaveDataTemp1, "");
    for (i = 7, i < 14, i = i + 1)
    {
        processSaveDataTemp = natoSaveTag[i];
        strcat(processSaveDataTemp1, processSaveDataTemp);
    }
    atoi(processSaveDataTemp1, lastSaveDayLong);

    // Get last trade save day
    strcpy(processSaveDataTemp1, "");
    for (i = 14, i < 21, i = i + 1)
    {
        processSaveDataTemp = natoSaveTag[i];
        strcat(processSaveDataTemp1, processSaveDataTemp);
    }
    atoi(processSaveDataTemp1, lastTradeSaveDayLong);

    // Get last trade check day
    strcpy(processSaveDataTemp1, "");
    for (i = 22, i < 23, i = i + 1)
    {
        processSaveDataTemp = natoSaveTag[i];
        strcat(processSaveDataTemp1, processSaveDataTemp);
    }
    atoi(processSaveDataTemp1, lastTradeUpdateDay);

    strcat(temp_c1, lastSaveDayLong);
    strcat(temp_c1, " ");
    strcat(temp_c1, lastTradeSaveDayLong);
    strcat(temp_c1, " ");
    strcat(temp_c1, lastTradeUpdateDay);
    //Scenario_WindowWithImageTopLeft("process save data", temp_c1, "", 3);

    returnVoid();
}

// Reads in the save data tags and acts on them
defineFunction(ReadSaveData, void)
{
    strcpy(temp_c1, "");
    strcpy(natoSaveTag, "");
    strcpy(ussrSaveTag, "");

    Building_GetNumberOfBuildings(buildingCount);
    for (i = 0, i < buildingCount, i = i + 1)
    {
        building.GetDataByIndex(i);
        if (building.nType ? BUILDINGTYPE_CUSTOMHOUSE & building.fPercFinished > 0.999 & building.nSubType ? BUILDINGSUBTYPE_AIRCUSTOM)
        {            
            houseType = building.nBorder_USD1_Rub2;

            if (houseType ? 1)
            {
                natoCustom = i;
                Building_GetCharTag(i, natoSaveTag);
                strlen(natoSaveTag, temp_i1);
                if (temp_i1 ? 0)
                {
                    temp_b1 = 0;
                }
                else()
                {
                    temp_b1 = 1;
                }
            }
            else()
            {
                ussrCustom = i;
                Building_GetCharTag(i, ussrSaveTag);
                strlen(ussrSaveTag, temp_i1);
                if (temp_i1 ? 0)
                {
                    temp_b2 = 0;
                }
                else()
                {
                    temp_b2 = 1;
                }
            }

        }
    }

    justLoaded = 1;

    // If we found both files, process the saves
    if (temp_b1 ? 1 & temp_b2 ? 1)
    {
        tutorialState = 0;
        ProcessSaveData();
    }
    else()
    {
// FIX THIS FIX THIS FIX THIS FIX THIS FIX THIS
// vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
        tutorialState = 0;
        CreateSaveData();
    }
    
    Objectives_CreateNewString("reputation", "Reputation");
    Objective_AddRequirement("reputation", 0.0, "images/east_icon.png");
    Objective_UpdateRequirement("reputation", 0, ussrRep);
    Objective_AddRequirement("reputation", 0.0, "images/west_icon.png");
    Objective_UpdateRequirement("reputation", 1, natoRep);

    returnVoid();
}

defineFunction(UpdateSaveData, void)
{
    ConvertFloatToCharLength(natoRep, 6);
    strcat(natoSaveTag, convertedFloatToCharLength);
    strcat(natoSaveTag, "_");
    strcat(natoSaveTag, saveDayLong);
    strcat(natoSaveTag, "_");
    strcat(natoSaveTag, lastTradeSaveDayLong);
    strcat(natoSaveTag, "_");
    strcat(natoSaveTag, lastTradeUpdateDay);

    ConvertFloatToCharLength(ussrRep, 6);
    strcat(ussrSaveTag, convertedFloatToCharLength);
    strcat(ussrSaveTag, "_");
    strcat(ussrSaveTag, saveDayLong);
    strcat(ussrSaveTag, "_");
    strcat(ussrSaveTag, lastTradeSaveDayLong);
    strcat(ussrSaveTag, "_");
    strcat(ussrSaveTag, lastTradeUpdateDay);

    Building_SetTagChar(natoSaveTag, natoCustom);
    Building_SetTagChar(ussrSaveTag, ussrCustom);

    returnVoid();
}

//temp_3v1 = building.vPosition;
//Vec3ToCharArray(temp_3v1);
//strcat(temp_c1, _vec3_outChar);